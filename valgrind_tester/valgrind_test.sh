#!/bin/bash
# filepath: valgrind_tester/valgrind_test.sh
# Testing completo de memory leaks y race conditions
# ‚úÖ SIMPLIFICADO: Ejecutar solo desde valgrind_tester/

echo ""
echo "üßπ =================================================="
echo "üßπ VALGRIND TESTING SUITE - PHILOSOPHERS v3.2"
echo "üßπ SIMPLIFICADO: Ejecutar desde valgrind_tester/"
echo "üßπ =================================================="
echo ""

# ‚úÖ RUTAS FIJAS SIMPLIFICADAS
PHILO_EXECUTABLE="../philo"
LOGS_DIR="./logs"

# Verificar que philo existe
if [ ! -f "$PHILO_EXECUTABLE" ]; then
    echo "‚ùå ERROR: $PHILO_EXECUTABLE no encontrado"
    echo "üí° Este script debe ejecutarse desde la carpeta valgrind_tester/"
    echo "üí° El ejecutable 'philo' debe estar en el directorio padre"
    echo ""
    echo "üìÅ Estructura esperada:"
    echo "   03_PHILOSOPHERS_42/"
    echo "   ‚îú‚îÄ‚îÄ philo                    # ‚Üê Ejecutable aqu√≠"
    echo "   ‚îî‚îÄ‚îÄ valgrind_tester/"
    echo "       ‚îú‚îÄ‚îÄ valgrind_test.sh     # ‚Üê Script aqu√≠"
    echo "       ‚îî‚îÄ‚îÄ logs/                # ‚Üê Logs aqu√≠"
    echo ""
    exit 1
fi

# Verificar que valgrind est√° instalado
if ! command -v valgrind &> /dev/null; then
    echo "‚ùå ERROR: Valgrind no est√° instalado"
    echo "üí° Instalar con: sudo apt install valgrind"
    echo ""
    exit 1
fi

echo "‚úÖ Valgrind encontrado: $(valgrind --version)"
echo "‚úÖ Ejecutable encontrado: $PHILO_EXECUTABLE"
echo ""

# ‚úÖ CREAR DIRECTORIO DE LOGS
mkdir -p "$LOGS_DIR"
echo "üìù Logs se guardar√°n en: $LOGS_DIR/"
echo ""

# ‚úÖ FUNCI√ìN: Filtrar errores de timeout
filter_timeout_errors() {
    local log_file="$1"
    local filtered_file="${log_file}.filtered"
    
    # Filtrar l√≠neas problem√°ticas relacionadas con SIGTERM/timeout
    grep -v -E "(Exiting thread still holds.*locks|Process terminating with default action of signal 15|SIGTERM)" "$log_file" > "$filtered_file"
    
    # Recalcular ERROR SUMMARY sin errores de timeout
    local original_errors=$(grep "ERROR SUMMARY:" "$log_file" | grep -o "[0-9]\+ errors" | grep -o "[0-9]\+" 2>/dev/null || echo "0")
    local timeout_errors=$(grep -c "Exiting thread still holds.*locks" "$log_file" 2>/dev/null || echo "0")
    local real_errors=$((original_errors - timeout_errors))
    
    if [ $real_errors -lt 0 ]; then
        real_errors=0
    fi
    
    echo "ERROR SUMMARY: $real_errors errors from contexts (timeout errors filtered)" >> "$filtered_file"
    
    echo "$filtered_file"
}

# ‚úÖ FUNCI√ìN: Test simplificado
run_valgrind_test() {
    local test_num="$1"
    local test_name="$2"
    local valgrind_opts="$3"
    local command_args="$4"
    local timeout_val="$5"
    local expected_exit="$6"
    local log_file="$LOGS_DIR/valgrind_${test_num}.log"
    
    echo "üßπ =============================================="
    echo "üßπ VALGRIND TEST $test_num: $test_name"
    echo "üßπ =============================================="
    echo "üîß Comando: timeout ${timeout_val}s valgrind $valgrind_opts $PHILO_EXECUTABLE $command_args"
    echo "üìù Log: logs/valgrind_${test_num}.log"
    echo "üéØ Exit esperado: $expected_exit"
    echo ""
    echo "üöÄ EJECUTANDO..."
    echo "----------------------------------------------"
    
    timeout ${timeout_val}s valgrind $valgrind_opts $PHILO_EXECUTABLE $command_args > "$log_file" 2>&1
    local exit_code=$?
    
    echo ""
    echo "----------------------------------------------"
    
    # Analizar c√≥digos de salida
    case $exit_code in
        0)
            echo "‚úÖ Test completado exitosamente"
            ;;
        1)
            if [ "$expected_exit" = "1" ]; then
                echo "‚úÖ Test fall√≥ como esperado (argumentos inv√°lidos)"
            else
                echo "‚ùå Test fall√≥ inesperadamente"
            fi
            ;;
        124)
            echo "‚è∞ Test terminado por timeout (normal para tests largos)"
            ;;
        *)
            echo "‚ö†Ô∏è  Test terminado con c√≥digo: $exit_code"
            ;;
    esac
    
    # Filtrar errores de timeout para tests de threading
    local filtered_log=""
    if [[ "$valgrind_opts" == *"helgrind"* ]] || [[ "$valgrind_opts" == *"drd"* ]]; then
        filtered_log=$(filter_timeout_errors "$log_file")
    fi
    
    # Analizar memory leaks
    echo ""
    echo "üìä RESUMEN DE MEMORY LEAKS:"
    if [ "$expected_exit" = "1" ]; then
        if grep -q "All heap blocks were freed -- no leaks are possible" "$log_file"; then
            echo "‚úÖ NO HAY MEMORY LEAKS (manejo de errores limpio)"
        elif grep -q "definitely lost" "$log_file"; then
            echo "‚ùå MEMORY LEAKS EN MANEJO DE ERRORES:"
            grep -E "(definitely lost|indirectly lost)" "$log_file" | head -3
        else
            echo "‚ö†Ô∏è  Revisar log para detalles"
        fi
    else
        if grep -q "All heap blocks were freed -- no leaks are possible" "$log_file"; then
            echo "‚úÖ NO HAY MEMORY LEAKS"
        elif grep -q "definitely lost" "$log_file"; then
            echo "‚ùå MEMORY LEAKS DETECTADOS:"
            grep -E "(definitely lost|indirectly lost|possibly lost)" "$log_file" | head -5
        else
            echo "‚ö†Ô∏è  Revisar log file para detalles"
        fi
    fi
    
    # Analizar threading errors
    if [ "$expected_exit" != "1" ] && [ -n "$filtered_log" ]; then
        echo ""
        echo "üìä RESUMEN DE THREADING/MUTEX (filtrado):"
        if grep -q "ERROR SUMMARY: 0 errors" "$filtered_log"; then
            echo "‚úÖ NO HAY ERRORES DE THREADING"
        else
            local timeout_errors_only=$(grep -c "Exiting thread still holds.*locks" "$log_file" 2>/dev/null || echo "0")
            local total_errors=$(grep "ERROR SUMMARY:" "$log_file" | grep -o "[0-9]\+ errors" | grep -o "[0-9]\+" 2>/dev/null || echo "0")
            
            if [ "$timeout_errors_only" -eq "$total_errors" ] 2>/dev/null && [ "$total_errors" -gt 0 ]; then
                echo "‚úÖ SOLO ERRORES DE TIMEOUT (ignorados)"
            else
                echo "‚ö†Ô∏è  Errores de threading detectados"
            fi
        fi
    fi
    
    echo ""
    echo ""
}

# ‚úÖ FUNCI√ìN: Test simple
run_simple_test() {
    local test_num="$1"
    local test_name="$2"
    local command_args="$3"
    local expected_exit="$4"
    local timeout_val="${5:-5}"
    
    echo "üîß =============================================="
    echo "üîß SIMPLE TEST $test_num: $test_name"
    echo "üîß =============================================="
    echo "üîß Comando: $PHILO_EXECUTABLE $command_args"
    echo "üéØ Exit esperado: $expected_exit"
    echo ""
    
    timeout ${timeout_val}s $PHILO_EXECUTABLE $command_args > /dev/null 2>&1
    local exit_code=$?
    
    if [ "$exit_code" -eq "$expected_exit" ]; then
        echo "‚úÖ Test PAS√ì - Exit code: $exit_code"
    else
        echo "‚ùå Test FALL√ì - Exit code: $exit_code (esperado: $expected_exit)"
    fi
    echo ""
}

echo "‚è≥ Comenzando tests completos de Valgrind..."
echo ""

# ========================================
# SECCI√ìN A: TESTS DE ARGUMENTOS INV√ÅLIDOS
# ========================================

echo "üî• ================================================"
echo "üî• SECCI√ìN A: VALIDACI√ìN DE ARGUMENTOS"
echo "üî• ================================================"
echo ""

run_simple_test "A1" "Sin argumentos" "" "1"
run_simple_test "A2" "Pocos argumentos (3)" "5 800 200" "1"
run_simple_test "A3" "Demasiados argumentos (6)" "5 800 200 200 5 extra" "1"
run_simple_test "A4" "N√∫mero negativo" "-5 800 200 200" "1"
run_simple_test "A5" "Cero fil√≥sofos" "0 800 200 200" "1"
run_simple_test "A6" "Argumento no num√©rico" "abc 800 200 200" "1"
run_simple_test "A7" "N√∫mero muy grande" "999999999 800 200 200" "1"

run_valgrind_test "A8" \
    "Memory leaks - Argumentos inv√°lidos" \
    "--leak-check=full --show-leak-kinds=all --track-origins=yes" \
    "-1 800 200 200" \
    "3" \
    "1"

# ========================================
# SECCI√ìN B: EDGE CASES
# ========================================

echo "‚ö° ================================================"
echo "‚ö° SECCI√ìN B: EDGE CASES"
echo "‚ö° ================================================"
echo ""

run_valgrind_test "B1" \
    "Edge case - 1 fil√≥sofo" \
    "--leak-check=full --show-leak-kinds=all --track-origins=yes" \
    "1 800 200 200" \
    "3" \
    "0"

run_valgrind_test "B2" \
    "Edge case - 2 fil√≥sofos" \
    "--leak-check=full --show-leak-kinds=all" \
    "2 1000 200 200" \
    "5" \
    "0"

run_valgrind_test "B3" \
    "Edge case - Muerte inmediata" \
    "--leak-check=full --show-leak-kinds=all --track-origins=yes" \
    "4 100 200 200" \
    "3" \
    "0"

run_valgrind_test "B4" \
    "Edge case - Tiempos m√≠nimos" \
    "--leak-check=full --show-leak-kinds=all" \
    "3 200 60 60" \
    "3" \
    "0"

run_valgrind_test "B5" \
    "Edge case - Sin l√≠mite comidas" \
    "--tool=helgrind --history-level=approx" \
    "3 800 200 200" \
    "6" \
    "124"

run_valgrind_test "B6" \
    "Edge case - Muchos fil√≥sofos" \
    "--leak-check=full --show-leak-kinds=all" \
    "10 800 200 200 2" \
    "8" \
    "0"

run_valgrind_test "B7" \
    "Edge case - 1 comida por fil√≥sofo" \
    "--leak-check=full --show-leak-kinds=all --track-origins=yes" \
    "4 800 200 200 1" \
    "5" \
    "0"

# ========================================
# SECCI√ìN C: CASOS NORMALES
# ========================================

echo "‚ú® ================================================"
echo "‚ú® SECCI√ìN C: CASOS NORMALES"
echo "‚ú® ================================================"
echo ""

run_valgrind_test "C1" \
    "Normal - Caso b√°sico" \
    "--leak-check=full --show-leak-kinds=all --track-origins=yes" \
    "4 800 200 200 5" \
    "8" \
    "0"

run_valgrind_test "C2" \
    "Normal - Terminaci√≥n natural" \
    "--leak-check=full --show-leak-kinds=all --track-origins=yes" \
    "3 800 200 200 3" \
    "8" \
    "0"

run_valgrind_test "C3" \
    "Normal - Race conditions (Helgrind)" \
    "--tool=helgrind --history-level=approx" \
    "5 800 200 200 4" \
    "10" \
    "124"

run_valgrind_test "C4" \
    "Normal - Data races (DRD)" \
    "--tool=drd --check-stack-var=yes" \
    "4 600 150 150 3" \
    "8" \
    "124"

# ========================================
# SECCI√ìN D: STRESS TESTS
# ========================================

echo "üí• ================================================"
echo "üí• SECCI√ìN D: STRESS TESTS"
echo "üí• ================================================"
echo ""

run_valgrind_test "D1" \
    "Stress - Muchas comidas" \
    "--leak-check=full --show-leak-kinds=all" \
    "4 800 200 200 10" \
    "15" \
    "0"

run_valgrind_test "D2" \
    "Stress - Threading intensivo" \
    "--tool=helgrind --history-level=none" \
    "8 800 100 100 5" \
    "12" \
    "124"

run_valgrind_test "D3" \
    "Stress - Memory muchos fil√≥sofos" \
    "--leak-check=full --show-leak-kinds=all" \
    "15 800 200 200 3" \
    "12" \
    "0"

run_valgrind_test "D4" \
    "Stress - Timing cr√≠tico" \
    "--tool=helgrind --history-level=approx" \
    "6 500 100 100" \
    "10" \
    "124"

# ========================================
# SECCI√ìN E: TESTS DE MEMORIA ESPEC√çFICOS
# ========================================

echo "üß† ================================================"
echo "üß† SECCI√ìN E: TESTS DE MEMORIA ESPEC√çFICOS"
echo "üß† ================================================"
echo ""

run_valgrind_test "E1" \
    "Memoria - Invalid access" \
    "--tool=memcheck --track-origins=yes --read-var-info=yes" \
    "3 400 150 100 2" \
    "6" \
    "0"

run_valgrind_test "E2" \
    "Memoria - Uninitialized" \
    "--tool=memcheck --track-origins=yes --track-fds=yes" \
    "4 500 200 150 3" \
    "8" \
    "0"

run_valgrind_test "E3" \
    "Memoria - Leaks detallados" \
    "--leak-check=full --show-leak-kinds=all --leak-resolution=high --track-origins=yes" \
    "5 600 200 200 2" \
    "8" \
    "0"

echo "üéâ =================================================="
echo "üéâ TODOS LOS TESTS COMPLETADOS"
echo "üéâ =================================================="
echo ""

# ========================================
# RESUMEN FINAL SIMPLIFICADO
# ========================================

echo "üìã RESUMEN FINAL:"
echo "=================="

echo ""
echo "üî• VALIDACI√ìN DE ARGUMENTOS:"
echo -n "   Test A8: "
if [ -f "$LOGS_DIR/valgrind_A8.log" ]; then
    if grep -q "All heap blocks were freed" "$LOGS_DIR/valgrind_A8.log"; then
        echo "‚úÖ SIN LEAKS en manejo de errores"
    else
        echo "‚ùå LEAKS en manejo de errores"
    fi
else
    echo "‚ö†Ô∏è  Log no encontrado"
fi

echo ""
echo "‚ö° EDGE CASES (Memory):"
for test in B1 B2 B3 B4 B6 B7; do
    echo -n "   Test $test: "
    if [ -f "$LOGS_DIR/valgrind_${test}.log" ]; then
        if grep -q "All heap blocks were freed" "$LOGS_DIR/valgrind_${test}.log"; then
            echo "‚úÖ SIN LEAKS"
        else
            echo "‚ùå CON LEAKS"
        fi
    else
        echo "‚ö†Ô∏è  No ejecutado"
    fi
done

echo ""
echo "‚ú® CASOS NORMALES:"
for test in C1 C2; do
    echo -n "   Test $test (Memory): "
    if [ -f "$LOGS_DIR/valgrind_${test}.log" ]; then
        if grep -q "All heap blocks were freed" "$LOGS_DIR/valgrind_${test}.log"; then
            echo "‚úÖ SIN LEAKS"
        else
            echo "‚ùå CON LEAKS"
        fi
    else
        echo "‚ö†Ô∏è  No ejecutado"
    fi
done

for test in C3 C4; do
    echo -n "   Test $test (Threading): "
    if [ -f "$LOGS_DIR/valgrind_${test}.log.filtered" ]; then
        if grep -q "ERROR SUMMARY: 0 errors" "$LOGS_DIR/valgrind_${test}.log.filtered"; then
            echo "‚úÖ SIN ERRORES REALES"
        else
            echo "‚ùå CON ERRORES REALES"
        fi
    else
        echo "‚ö†Ô∏è  Revisar log"
    fi
done

echo ""
echo "üí• STRESS TESTS:"
for test in D1 D3; do
    echo -n "   Test $test (Memory): "
    if [ -f "$LOGS_DIR/valgrind_${test}.log" ]; then
        if grep -q "All heap blocks were freed" "$LOGS_DIR/valgrind_${test}.log"; then
            echo "‚úÖ SIN LEAKS"
        else
            echo "‚ùå CON LEAKS"
        fi
    else
        echo "‚ö†Ô∏è  No ejecutado"
    fi
done

echo ""
echo "üß† TESTS DE MEMORIA:"
for test in E1 E2 E3; do
    echo -n "   Test $test: "
    if [ -f "$LOGS_DIR/valgrind_${test}.log" ]; then
        if grep -q "All heap blocks were freed" "$LOGS_DIR/valgrind_${test}.log"; then
            echo "‚úÖ SIN LEAKS"
        else
            echo "‚ùå CON LEAKS"
        fi
    else
        echo "‚ö†Ô∏è  No ejecutado"
    fi
done

echo ""
echo "üí° COMANDOS √öTILES:"
echo "   üìÑ Ver logs de argumentos: ls logs/valgrind_A*.log"
echo "   üìÑ Ver logs de edge cases: ls logs/valgrind_B*.log"
echo "   üìÑ Ver logs normales: ls logs/valgrind_C*.log"
echo "   üìÑ Ver logs de stress: ls logs/valgrind_D*.log"
echo "   üìÑ Ver logs de memoria: ls logs/valgrind_E*.log"
echo "   üìÑ Ver solo errores: grep -r \"ERROR SUMMARY\" logs/ | grep -v \"0 errors\""
echo "   üìÑ Ver solo leaks: grep -r \"definitely lost\" logs/"
echo "   üßπ Limpiar logs: rm logs/valgrind_*.log*"
echo ""

# Estad√≠sticas finales
total_tests=$(ls "$LOGS_DIR"/valgrind_*.log 2>/dev/null | wc -l)
clean_memory=$(grep -l "All heap blocks were freed" "$LOGS_DIR"/valgrind_*.log 2>/dev/null | wc -l)
echo "üìä ESTAD√çSTICAS:"
echo "   üîÑ Tests ejecutados: $total_tests"
echo "   ‚úÖ Tests sin memory leaks: $clean_memory"
if [ "$total_tests" -gt 0 ]; then
    echo "   üìà Porcentaje limpio: $(( clean_memory * 100 / total_tests ))%"
fi
echo ""

echo "‚ÑπÔ∏è  ESTRUCTURA:"
echo "   üìÅ valgrind_tester/valgrind_test.sh  # ‚Üê Script"
echo "   üìÅ valgrind_tester/logs/             # ‚Üê Logs"
echo "   üìÅ ../philo                          # ‚Üê Ejecutable"
echo ""